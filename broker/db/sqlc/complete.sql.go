// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: complete.sql

package db

import (
	"context"
	"database/sql"
)

const createComplete = `-- name: CreateComplete :one
INSERT INTO complete_tasks (
  id,
  title,
  description,
  date,
  is_done,
  is_delete,
  is_favorite
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, title, description, date, is_done, is_delete, is_favorite
`

type CreateCompleteParams struct {
	ID          string `json:"id"`
	Title       string `json:"title"`
	Description string `json:"description"`
	Date        string `json:"date"`
	IsDone      bool   `json:"is_done"`
	IsDelete    bool   `json:"is_delete"`
	IsFavorite  bool   `json:"is_favorite"`
}

func (q *Queries) CreateComplete(ctx context.Context, arg CreateCompleteParams) (CompleteTask, error) {
	row := q.db.QueryRowContext(ctx, createComplete,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Date,
		arg.IsDone,
		arg.IsDelete,
		arg.IsFavorite,
	)
	var i CompleteTask
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Date,
		&i.IsDone,
		&i.IsDelete,
		&i.IsFavorite,
	)
	return i, err
}

const deleteComplete = `-- name: DeleteComplete :exec
DELETE FROM complete_tasks WHERE id = $1
`

func (q *Queries) DeleteComplete(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteComplete, id)
	return err
}

const getAllComplete = `-- name: GetAllComplete :many
SELECT id, title, description, date, is_done, is_delete, is_favorite FROM complete_tasks
ORDER BY date
`

func (q *Queries) GetAllComplete(ctx context.Context) ([]CompleteTask, error) {
	rows, err := q.db.QueryContext(ctx, getAllComplete)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CompleteTask{}
	for rows.Next() {
		var i CompleteTask
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Date,
			&i.IsDone,
			&i.IsDelete,
			&i.IsFavorite,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getComplete = `-- name: GetComplete :one
SELECT id, title, description, date, is_done, is_delete, is_favorite FROM complete_tasks
WHERE id = $1
`

func (q *Queries) GetComplete(ctx context.Context, id string) (CompleteTask, error) {
	row := q.db.QueryRowContext(ctx, getComplete, id)
	var i CompleteTask
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Date,
		&i.IsDone,
		&i.IsDelete,
		&i.IsFavorite,
	)
	return i, err
}

const updateComplete = `-- name: UpdateComplete :one
UPDATE complete_tasks
SET
   title = COALESCE($4,title),
  description = COALESCE($5,description),
  date = COALESCE($6,date),
  is_done = $1,
  is_delete = $2,
  is_favorite = $3
WHERE
   id = $7
RETURNING id, title, description, date, is_done, is_delete, is_favorite
`

type UpdateCompleteParams struct {
	IsDone      bool           `json:"is_done"`
	IsDelete    bool           `json:"is_delete"`
	IsFavorite  bool           `json:"is_favorite"`
	Title       sql.NullString `json:"title"`
	Description sql.NullString `json:"description"`
	Date        sql.NullString `json:"date"`
	ID          string         `json:"id"`
}

func (q *Queries) UpdateComplete(ctx context.Context, arg UpdateCompleteParams) (CompleteTask, error) {
	row := q.db.QueryRowContext(ctx, updateComplete,
		arg.IsDone,
		arg.IsDelete,
		arg.IsFavorite,
		arg.Title,
		arg.Description,
		arg.Date,
		arg.ID,
	)
	var i CompleteTask
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Date,
		&i.IsDone,
		&i.IsDelete,
		&i.IsFavorite,
	)
	return i, err
}
